### This is a specification for general VDXF keys to be used to define and represent assets ("Assets") that are bound to a VerusID
### Assets can be digital art, NFTs, deeds representing ownership of physical assets, contracts, collectibles, in-game items, tickets, coupons, any combination of these, etc etc
### Assets may consist of various data elements
### A VerusID controls only one Asset definition, which may contain multiple pieces of content

### These are *general* URIs
### In implementation, these general URIs should be hashed together with a VerusID (using the getvdfxid api) to obtain globally unique identifiers for each data element

### In implementation, globally unique tags that are generated shall be used as a --tag-name on each data element uploaded to a storage account
### The applicable storage account shall be referenced in the contentmap of the VerusID that controls the Assets

### Data elements that make up the Assets may be uploaded to data storage modularly
### All uploaded data elements must be tagged with the Fundamental Tag
### The "root" data element should be tagged with the Fundamental Tag plus the Root Element Tag
### Modular elements not contained in the root element should be tagged with the Fundamental Tag and a Modular Element Tag

### Apps that retrieve and render Assets on behalf of a VerusID may consult the contentmap to locate a storage account where such VerusID holds its collections of data
### The app may then generate the globally unique identifier corresponding to the Fundamental Tag when hashed together with the VerusID
### The app may then query the storage account for all data elements that contain the Fundamental Tag

### Elements are tagged with a --tag-name equal to the the globally unique identifier, and a --tag-value equal to a version number, currently "1"

### Fundamental Tag - to be included in all data elements that are to be included in the Assets

vrsc::identity.assets

### Root Element Tag

vrsc::identity.assets.root

### Required Contents of the Root element - the root element is a json object typically styled as assets.json

{
    "<globally unique identifier when hashed with ID>": {
      “status”: “<active or deleted>”
    }
}

### Optional Contents of the Root element
### Any modular element (described below) may be optionally included as a json element within the Root element rather than being uploaded and tagged separately as a modular element
### Best practice is to upload and tag separately to provide for more efficient updates
### Where there is a separately uploaded element that also exists within the root element, the valid element is considered to be the most recently uploaded transaction

### Apps shall begin by retrieving the most recent storage transaction that contains the Root Element
### If the status in this element is "deleted", no data is returned and the retrieval operation is ended
### If the status in this element is "active", the rest of the element is considered, as are all of the other grouped and sorted elements as described below

### Tags and Content for each Modular Element

### The MetaLabel element (optional) - provides a metalabel desired by the user to categorize or give context and meaning to the Assets
### This information is not intended to be displayed but is to guide apps as to what type of Assets are represented if that might be helpful for display purposes

vrsc::identity.assets.metalabel

{
    "<globally unique identifier when hashed with ID>":  {
      "status": "<deleted>"
      -OR-
      "label":"<any arbitrary user defined label such as 'NFT'>"
    }
}

### The Provenance Element (required)

vrsc::identity.assets.provenance
{
    "<globally unique identifier when hashed with ID>":  {
      "creator": "<VerusID representing the creator/minter of the Assets>",
      "owner": "<VerusID representing the owner of the Assets>"
      "collection":"<globally unique identifier of any collection>"
    }
}


### The Content Element (required)
### The content may be a media or other file returned directly by the transaction, or may be a json element providing URLs for the content
### A content json may provide an arbitrary number of URLs within the element, which taken together form the content of the Assets

{
    "<globally unique identifier when hashed with ID>":  {
      "content":"url",
      "content":"url",
      ...
    }
}

### The Description Element (optional)
### The description may be a markdown or other file returned directly by the transaction, or may be a json element providing URLs for the description

{
    "<globally unique identifier when hashed with ID>":  {
      "status": "<deleted>"
      -OR-
      "title":"<optional, a heading or title by which the content is known>",
      "description":"url",
      "description":"url",
      ...
    }
}

### The Licenses Element (optional)
### The licenses may be a pdf or other file returned directly by the transaction, or may be a json element providing URLs for the licenses

{
    "<globally unique identifier when hashed with ID>":  {
      "status": "<deleted>"
      -OR-
      "license":"url",
      "license":"url",
      ...
      "signatures": {
        "object": "<url of material being signed>",
        "signer": "<verusID | description of signatory | url of signatory>",
        "signature": "<url of signature | crytpographic signature>"
    }
}

### The Deed Element (optional)
### The deed or title certificate may be a pdf or other file returned directly by the transaction, or may be a json element providing URLs for the deed

{
    "<globally unique identifier when hashed with ID>":  {
      "status": "<deleted>"
      -OR-
      "deed":"url",
      "deed":"url",
      ...
      "signatures": {
        "object": "<url of material being signed>",
        "signer": "<verusID | description of signatory | url of signatory>",
        "signature": "<url of signature | crytpographic signature>"
    }
}

### The Properties Element (optional)
### The properties element permits the attachment of properties/traits

### levels/stats/boosts

### locked content


### The Lock Element (optional)
### The lock element when activated means that any future purported updates to the Assets are invalid unless a subsequent valid unlock element has been created

vrsc::identity.assets.lock

{
    "<globally unique identifier when hashed with ID>":  {
      "status": "locked"
    }
}

### The Unlock Element (optional)
### If present and valid, then subsequent transactions updating the Assets are to be processed by Apps
### A valid Unlock requires the
